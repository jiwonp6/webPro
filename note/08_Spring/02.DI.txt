◎ DI(Dependency Injection) 
1. DI
	: 의존 관계 주입 기능, 객체 직접 생성X → 외부에서 생성 후 주입
	 				  (모듈 간 결합도 ↓,유연성↑)
	* 객체 생성 순서
		① 객체 생성
		        ↓
		② 의존성 객체 주입
		    (스스로X/ 제어권을 스프링에게 위임, 스프링이 만들어놓은 객체 주입)
			        ↓
		③ 의존성 객체 메소드 호출
	* 의존 주입 방법
		- setter 통해
		- 생성자 통해
		- xml 파일을 통해 (@Autowired 어노테이션을 이용한 객체간 의존 자동 연결)
		- java 파일을 통해
2. Spring 컨테이너(IoC 컨테이너)
	- 스프링 컨테이너 생성 
		: GenericXmlApplicationContext ctx = new GenericXmlApplicationContext();
	- 스프링 컨테이너 설정 
		: ctx.load(“classpath:applicationCTX.xml”); ctx.refresh();
	- 스프링 컨테이너 사용 
		: Student st = ctx.getBean(“student”,Student.class); st.getName();
	- 스프링 컨테이너 소멸(자원해제) 
		: ctx.close();
	* 생명주기 
		- 인터페이스를 이용한 생명주기
			① Implements EnvironmentAware
				: EnvironmentAware를 implements → 오버라이드한 setEnvironment() 생성
				  (빈이 만들어지기 전 수행 – 환경변수에 대한 변경이 생길 시에만 호출됨)
		- 인터페이스를 이용한 생명주기 관리 방법
			① Implements InitializingBean
				: InitializingBean을 implements → 오라바이드한 afterPropertiesSet() 생성
				 (빈 초기화 과정(ctx.refresh())에서 호출됨)
			② DisposableBean
				: DisposableBean 을 implements → 오버라이드한 destroy() 생성
				 (빈 소멸과정(ctx.close())에서 호출됨)
		- 컨테이너 소멸
			① ctx.close()
				: 컨테이너가 소멸 하는 단계
				 (컨테이너 소멸 → 빈 자동 소멸)
	* Spring Bean 범위
		- 스프링 컨테이너가 생성되고, 스프링 빈이 생성될 때, 생성된 스프링 빈은 scope를 가지고 있음.
		- 범위 
			: 객체가 어디까지 영향을 미치는지 결정하는 것) 
		- 기본 
			: scope="singleton"
		      	( ↔ cf. scope=" prototype ")

