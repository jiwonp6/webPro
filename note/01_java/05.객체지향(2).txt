◎ 객체지향
	: 캡슐화가 핵심
	* 캡슐화
		: 객체가 포함한 속성과 메소드 → 객체 간의 관계에서 접근 권한을 처리하는 것
1. 객체( = 데이터 + 메소드, 메소드의 상위 개념)
	: 같은 종류의 데이터(=속성, 필드), 메소드 함께 있는 구성체
	cf. 객체 vs 클래스
	    클래스는 객체의 설계도라 할 수 있음.
		eg. '차'라는 클래스 (클래스 안 '차가 달린다', '달리다 멈춘다'라는 것이 정의돼있음)
			↓ 	// 설계도면 대로 내 차가 움직인다. (클래스따라 객체 생성)
		     '내 차'+'달린다', '내 차'+'멈춘다' 라는 객체
		     '내 차' 라는 필드
		     '달린다', '멈춘다' 라는 메소드
		
		즉, myCar = new Car( ); 에서 myCar라는 객체가 Car( )라는 클래스의 새로운(new) 객체로 생성
2. 클래스 제작
	- 패키지 명
	- 클래스 명
	- 데이터
	- 생성자 함수
		: 클래스명과 똑같이 리턴타입X인 메소드, 클래스형 객체 만들 때 호출됨, 필수적
	- 메소드
	- setter & getter
		: setter는 setting하는 것, 값을 설정해 주는 것, getter는 가져다 쓰는 것, return값 필요
		* 이때 this 쓰임
			this = 객체 자신
